
D2_Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000092a  000009be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000092a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800112  00800112  000009d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e89  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008be  00000000  00000000  00001979  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072c  00000000  00000000  00002237  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002964  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000520  00000000  00000000  00002b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b2  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000035e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  9e:	0c 94 93 04 	jmp	0x926	; 0x926 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_command>:
		LCD_Char(*str++);
	}
}

void LCD_MoveToFirstLine(void){
	LCD_command(0x80);
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	9b 7f       	andi	r25, 0xFB	; 251
  aa:	9b b9       	out	0x0b, r25	; 11
  ac:	9b b1       	in	r25, 0x0b	; 11
  ae:	40 e1       	ldi	r20, 0x10	; 16
  b0:	84 9f       	mul	r24, r20
  b2:	90 01       	movw	r18, r0
  b4:	11 24       	eor	r1, r1
  b6:	9f 70       	andi	r25, 0x0F	; 15
  b8:	29 2b       	or	r18, r25
  ba:	2b b9       	out	0x0b, r18	; 11
  bc:	95 b1       	in	r25, 0x05	; 5
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	82 95       	swap	r24
  c2:	8f 70       	andi	r24, 0x0F	; 15
  c4:	89 2b       	or	r24, r25
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	8b b9       	out	0x0b, r24	; 11
  ce:	85 e1       	ldi	r24, 0x15	; 21
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_command+0x2a>
  d4:	00 00       	nop
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	8f e8       	ldi	r24, 0x8F	; 143
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_command+0x3a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_command+0x40>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <LCD_8b_init>:
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	8c 6f       	ori	r24, 0xFC	; 252
  ee:	8a b9       	out	0x0a, r24	; 10
  f0:	84 b1       	in	r24, 0x04	; 4
  f2:	8f 60       	ori	r24, 0x0F	; 15
  f4:	84 b9       	out	0x04, r24	; 4
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	89 ef       	ldi	r24, 0xF9	; 249
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <LCD_8b_init+0x12>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_8b_init+0x1c>
 106:	00 00       	nop
 108:	88 e3       	ldi	r24, 0x38	; 56
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_command>
 10e:	8c e0       	ldi	r24, 0x0C	; 12
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_command>
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_command>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_command>
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	9f e1       	ldi	r25, 0x1F	; 31
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_8b_init+0x3a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_8b_init+0x40>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <LCD_Char>:
 12e:	9b b1       	in	r25, 0x0b	; 11
 130:	94 60       	ori	r25, 0x04	; 4
 132:	9b b9       	out	0x0b, r25	; 11
 134:	9b b1       	in	r25, 0x0b	; 11
 136:	40 e1       	ldi	r20, 0x10	; 16
 138:	84 9f       	mul	r24, r20
 13a:	90 01       	movw	r18, r0
 13c:	11 24       	eor	r1, r1
 13e:	9f 70       	andi	r25, 0x0F	; 15
 140:	29 2b       	or	r18, r25
 142:	2b b9       	out	0x0b, r18	; 11
 144:	95 b1       	in	r25, 0x05	; 5
 146:	90 7f       	andi	r25, 0xF0	; 240
 148:	82 95       	swap	r24
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	89 2b       	or	r24, r25
 14e:	85 b9       	out	0x05, r24	; 5
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	88 60       	ori	r24, 0x08	; 8
 154:	8b b9       	out	0x0b, r24	; 11
 156:	85 e1       	ldi	r24, 0x15	; 21
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_Char+0x2a>
 15c:	00 00       	nop
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	87 7f       	andi	r24, 0xF7	; 247
 162:	8b b9       	out	0x0b, r24	; 11
 164:	8f e8       	ldi	r24, 0x8F	; 143
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_Char+0x3a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_Char+0x40>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <LCD_String>:
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
 178:	03 c0       	rjmp	.+6      	; 0x180 <LCD_String+0xe>
 17a:	21 96       	adiw	r28, 0x01	; 1
 17c:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_Char>
 180:	88 81       	ld	r24, Y
 182:	81 11       	cpse	r24, r1
 184:	fa cf       	rjmp	.-12     	; 0x17a <LCD_String+0x8>
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <LCD_MoveToSecondLine>:
}

void LCD_MoveToSecondLine(void){
	LCD_command(0xC0);
 18c:	80 ec       	ldi	r24, 0xC0	; 192
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_command>
 192:	08 95       	ret

00000194 <init_ADC>:
		LCD_String(salida);
    }
}

void init_ADC(void){
	ADMUX = 0;
 194:	ec e7       	ldi	r30, 0x7C	; 124
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	10 82       	st	Z, r1
	//Vref = AVCC = 5V
	ADMUX |= (1<<REFS0);
 19a:	80 81       	ld	r24, Z
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	80 83       	st	Z, r24
	// Justificado a la izquierda
	ADMUX |= (1<<ADLAR);
 1a0:	80 81       	ld	r24, Z
 1a2:	80 62       	ori	r24, 0x20	; 32
 1a4:	80 83       	st	Z, r24
	
	ADCSRA = 0;
 1a6:	ea e7       	ldi	r30, 0x7A	; 122
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	10 82       	st	Z, r1
	// Habilitar ADC
	ADCSRA |= (1<<ADEN);
 1ac:	80 81       	ld	r24, Z
 1ae:	80 68       	ori	r24, 0x80	; 128
 1b0:	80 83       	st	Z, r24
	// Máscara de interrupción del ADC
	ADCSRA |= (1<<ADIE);
 1b2:	80 81       	ld	r24, Z
 1b4:	88 60       	ori	r24, 0x08	; 8
 1b6:	80 83       	st	Z, r24
	// Prescaler del ADC a 128
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 1b8:	80 81       	ld	r24, Z
 1ba:	87 60       	ori	r24, 0x07	; 7
 1bc:	80 83       	st	Z, r24
	
	ADCSRB = 0;
 1be:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	
	// El ADC está configurado para correr en modo Single Conversion
	//Iniciar primera conversión
	ADCSRA |= (1<<ADSC);
 1c2:	80 81       	ld	r24, Z
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	80 83       	st	Z, r24
 1c8:	08 95       	ret

000001ca <init_UART57600>:
}

void init_UART57600(void){
	
	// Configurar pines TX y RX
	DDRD &= ~(1<<DDD0);
 1ca:	8a b1       	in	r24, 0x0a	; 10
 1cc:	8e 7f       	andi	r24, 0xFE	; 254
 1ce:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 1d0:	8a b1       	in	r24, 0x0a	; 10
 1d2:	82 60       	ori	r24, 0x02	; 2
 1d4:	8a b9       	out	0x0a, r24	; 10
	
	//Configurar A modo Fast U2X0 = 1
	UCSR0A = 0;
 1d6:	e0 ec       	ldi	r30, 0xC0	; 192
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	10 82       	st	Z, r1
	UCSR0A |= (1<<U2X0);
 1dc:	80 81       	ld	r24, Z
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	80 83       	st	Z, r24
	
	//Configurar B Habilitar ISR RX
	UCSR0B = 0;
 1e2:	e1 ec       	ldi	r30, 0xC1	; 193
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0);
 1e8:	80 81       	ld	r24, Z
 1ea:	80 69       	ori	r24, 0x90	; 144
 1ec:	80 83       	st	Z, r24
	
	// Paso 4: Configurar C Frame: 8 bits datos, no paridad, 1 bit stop
	UCSR0C = 0;
 1ee:	e2 ec       	ldi	r30, 0xC2	; 194
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 1f4:	80 81       	ld	r24, Z
 1f6:	86 60       	ori	r24, 0x06	; 6
 1f8:	80 83       	st	Z, r24
	
	// Baudrate = 57600
	UBRR0 = 34;
 1fa:	82 e2       	ldi	r24, 0x22	; 34
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 202:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 206:	08 95       	ret

00000208 <setup>:
	
}

void setup(void){
	cli();
 208:	f8 94       	cli
	DDRC = 0;
 20a:	17 b8       	out	0x07, r1	; 7
	init_UART57600();
 20c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <init_UART57600>
	init_ADC();
 210:	0e 94 ca 00 	call	0x194	; 0x194 <init_ADC>
	LCD_8b_init();
 214:	0e 94 75 00 	call	0xea	; 0xea <LCD_8b_init>
	sei();
 218:	78 94       	sei
 21a:	08 95       	ret

0000021c <float_a_string>:
}

void float_a_string(float numero, char *buffer) {
 21c:	8f 92       	push	r8
 21e:	9f 92       	push	r9
 220:	af 92       	push	r10
 222:	bf 92       	push	r11
 224:	cf 92       	push	r12
 226:	df 92       	push	r13
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	4b 01       	movw	r8, r22
 232:	5c 01       	movw	r10, r24
 234:	ea 01       	movw	r28, r20
	int parte_entera = (int)numero;  // Obtener la parte entera
 236:	0e 94 28 03 	call	0x650	; 0x650 <__fixsfsi>
 23a:	6b 01       	movw	r12, r22
 23c:	7c 01       	movw	r14, r24
	int parte_decimal = (int)((numero - parte_entera) * 100);  // Obtener 2 decimales
 23e:	07 2e       	mov	r0, r23
 240:	00 0c       	add	r0, r0
 242:	88 0b       	sbc	r24, r24
 244:	99 0b       	sbc	r25, r25
 246:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__floatsisf>
 24a:	9b 01       	movw	r18, r22
 24c:	ac 01       	movw	r20, r24
 24e:	c5 01       	movw	r24, r10
 250:	b4 01       	movw	r22, r8
 252:	0e 94 49 02 	call	0x492	; 0x492 <__subsf3>
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	48 ec       	ldi	r20, 0xC8	; 200
 25c:	52 e4       	ldi	r21, 0x42	; 66
 25e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__mulsf3>
 262:	0e 94 28 03 	call	0x650	; 0x650 <__fixsfsi>
	
	// Convertir a string manualmente
	int i = 0;
	buffer[i++] = '0' + parte_entera;
 266:	20 e3       	ldi	r18, 0x30	; 48
 268:	2c 0d       	add	r18, r12
 26a:	28 83       	st	Y, r18

	buffer[i++] = '.';  // Agregar punto decimal
 26c:	2e e2       	ldi	r18, 0x2E	; 46
 26e:	29 83       	std	Y+1, r18	; 0x01

	// Convertir parte decimal a string (dos dígitos fijos)
	buffer[i++] = '0' + (parte_decimal / 10);
 270:	cb 01       	movw	r24, r22
 272:	6a e0       	ldi	r22, 0x0A	; 10
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__divmodhi4>
 27a:	60 5d       	subi	r22, 0xD0	; 208
 27c:	6a 83       	std	Y+2, r22	; 0x02
	buffer[i++] = '0' + (parte_decimal % 10);
 27e:	80 5d       	subi	r24, 0xD0	; 208
 280:	8b 83       	std	Y+3, r24	; 0x03

	buffer[i] = '\0';  // Terminar string
 282:	1c 82       	std	Y+4, r1	; 0x04
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	df 90       	pop	r13
 28e:	cf 90       	pop	r12
 290:	bf 90       	pop	r11
 292:	af 90       	pop	r10
 294:	9f 90       	pop	r9
 296:	8f 90       	pop	r8
 298:	08 95       	ret

0000029a <mapear5V>:


void mapear5V(int valor, char *buffer, size_t tamano){
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	eb 01       	movw	r28, r22
	float resultado = (valor / 255.0) * 5.0;
 2a0:	bc 01       	movw	r22, r24
 2a2:	99 0f       	add	r25, r25
 2a4:	88 0b       	sbc	r24, r24
 2a6:	99 0b       	sbc	r25, r25
 2a8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__floatsisf>
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	4f e7       	ldi	r20, 0x7F	; 127
 2b2:	53 e4       	ldi	r21, 0x43	; 67
 2b4:	0e 94 b6 02 	call	0x56c	; 0x56c <__divsf3>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	40 ea       	ldi	r20, 0xA0	; 160
 2be:	50 e4       	ldi	r21, 0x40	; 64
 2c0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__mulsf3>
	//snprintf(buffer, tamano, "%.2f", resultado);
	//dtostrf(resultado, 4, 2, buffer);
	float_a_string(resultado, buffer);
 2c4:	ae 01       	movw	r20, r28
 2c6:	0e 94 0e 01 	call	0x21c	; 0x21c <float_a_string>
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <int_to_string>:

void int_to_string(int valor, char *buffer){
 2d0:	fb 01       	movw	r30, r22
	if (valor < 10){
 2d2:	8a 30       	cpi	r24, 0x0A	; 10
 2d4:	91 05       	cpc	r25, r1
 2d6:	34 f4       	brge	.+12     	; 0x2e4 <int_to_string+0x14>
		buffer[0] = '0';
 2d8:	90 e3       	ldi	r25, 0x30	; 48
 2da:	90 83       	st	Z, r25
		buffer[1] = '0' + valor;
 2dc:	80 5d       	subi	r24, 0xD0	; 208
 2de:	81 83       	std	Z+1, r24	; 0x01
		buffer[2] = '\0';
 2e0:	12 82       	std	Z+2, r1	; 0x02
 2e2:	08 95       	ret
	} else {
		buffer[0] = '0' + (valor / 10);
 2e4:	6a e0       	ldi	r22, 0x0A	; 10
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__divmodhi4>
 2ec:	60 5d       	subi	r22, 0xD0	; 208
 2ee:	60 83       	st	Z, r22
		buffer[1] = '0' + (valor % 10);
 2f0:	80 5d       	subi	r24, 0xD0	; 208
 2f2:	81 83       	std	Z+1, r24	; 0x01
		buffer[2] = '\0';
 2f4:	12 82       	std	Z+2, r1	; 0x02
 2f6:	08 95       	ret

000002f8 <main>:
void setup(void);
void mapear5V(int valor, char *buffer, size_t tamano);
void int_to_string(int valor, char *buffer);

int main(void)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	6f 97       	sbiw	r28, 0x1f	; 31
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	
	setup();
 30c:	0e 94 04 01 	call	0x208	; 0x208 <setup>
	
	LCD_String(" S1:   S2:  S3:");
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_String>
	
    while (1) 
    {
		if (bandera_lectura == 1)
 318:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <bandera_lectura>
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	c9 f4       	brne	.+50     	; 0x352 <main+0x5a>
		{
			bandera_lectura = 0;
 320:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <bandera_lectura>
			if (bufferRX == '+')
 324:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <bufferRX>
 328:	8b 32       	cpi	r24, 0x2B	; 43
 32a:	41 f4       	brne	.+16     	; 0x33c <main+0x44>
			{
				if (valor_contador < 20)
 32c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 330:	84 31       	cpi	r24, 0x14	; 20
 332:	78 f4       	brcc	.+30     	; 0x352 <main+0x5a>
				{
					valor_contador += 1;
 334:	8f 5f       	subi	r24, 0xFF	; 255
 336:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 33a:	0b c0       	rjmp	.+22     	; 0x352 <main+0x5a>
				}
			} else if (bufferRX == '-')
 33c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <bufferRX>
 340:	8d 32       	cpi	r24, 0x2D	; 45
 342:	39 f4       	brne	.+14     	; 0x352 <main+0x5a>
			{
				if (valor_contador > 0)
 344:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 348:	88 23       	and	r24, r24
 34a:	19 f0       	breq	.+6      	; 0x352 <main+0x5a>
				{
					valor_contador -= 1;
 34c:	81 50       	subi	r24, 0x01	; 1
 34e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				}
			}
		}
		char s1[5];
		mapear5V(valor_pot0, s1, sizeof(s1));
 352:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <valor_pot0>
 356:	45 e0       	ldi	r20, 0x05	; 5
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	be 01       	movw	r22, r28
 35c:	6b 5e       	subi	r22, 0xEB	; 235
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 4d 01 	call	0x29a	; 0x29a <mapear5V>
		char s2[5];
		mapear5V(valor_pot1, s2, sizeof(s2));
 366:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <valor_pot1>
 36a:	45 e0       	ldi	r20, 0x05	; 5
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	be 01       	movw	r22, r28
 370:	60 5f       	subi	r22, 0xF0	; 240
 372:	7f 4f       	sbci	r23, 0xFF	; 255
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 4d 01 	call	0x29a	; 0x29a <mapear5V>
		char s3[3];
		int_to_string(valor_contador, s3);
 37a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 37e:	be 01       	movw	r22, r28
 380:	63 5e       	subi	r22, 0xE3	; 227
 382:	7f 4f       	sbci	r23, 0xFF	; 255
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 68 01 	call	0x2d0	; 0x2d0 <int_to_string>
		char salida[15];
		char V[] = "V ";
 38a:	86 e5       	ldi	r24, 0x56	; 86
 38c:	90 e2       	ldi	r25, 0x20	; 32
 38e:	9b 8f       	std	Y+27, r25	; 0x1b
 390:	8a 8f       	std	Y+26, r24	; 0x1a
 392:	1c 8e       	std	Y+28, r1	; 0x1c
		strcpy(salida, s1);
 394:	be 01       	movw	r22, r28
 396:	6b 5e       	subi	r22, 0xEB	; 235
 398:	7f 4f       	sbci	r23, 0xFF	; 255
 39a:	ce 01       	movw	r24, r28
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	0e 94 8c 04 	call	0x918	; 0x918 <strcpy>
		strcat(salida, V);
 3a2:	be 01       	movw	r22, r28
 3a4:	66 5e       	subi	r22, 0xE6	; 230
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	ce 01       	movw	r24, r28
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	0e 94 81 04 	call	0x902	; 0x902 <strcat>
		strcat(salida, s2);
 3b0:	be 01       	movw	r22, r28
 3b2:	60 5f       	subi	r22, 0xF0	; 240
 3b4:	7f 4f       	sbci	r23, 0xFF	; 255
 3b6:	ce 01       	movw	r24, r28
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	0e 94 81 04 	call	0x902	; 0x902 <strcat>
		strcat(salida, V);
 3be:	be 01       	movw	r22, r28
 3c0:	66 5e       	subi	r22, 0xE6	; 230
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	ce 01       	movw	r24, r28
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	0e 94 81 04 	call	0x902	; 0x902 <strcat>
		strcat(salida, s3);
 3cc:	be 01       	movw	r22, r28
 3ce:	63 5e       	subi	r22, 0xE3	; 227
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255
 3d2:	ce 01       	movw	r24, r28
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	0e 94 81 04 	call	0x902	; 0x902 <strcat>
		//snprintf(salida, sizeof(salida), "%s%s%s%s%s", s1, V, s2, V, s3);
		LCD_MoveToSecondLine();
 3da:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_MoveToSecondLine>
		LCD_String(salida);
 3de:	ce 01       	movw	r24, r28
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_String>
    }
 3e6:	98 cf       	rjmp	.-208    	; 0x318 <main+0x20>

000003e8 <__vector_21>:
		buffer[1] = '0' + (valor % 10);
		buffer[2] = '\0';
	}
}

ISR(ADC_vect){
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	8f 93       	push	r24
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
	ADCSRA &= ~(1<<ADEN);
 3f8:	ea e7       	ldi	r30, 0x7A	; 122
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	8f 77       	andi	r24, 0x7F	; 127
 400:	80 83       	st	Z, r24
	if (alternador_pots==0)
 402:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 406:	81 11       	cpse	r24, r1
 408:	0f c0       	rjmp	.+30     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	{
		
		ADMUX |= (1<<MUX0);
 40a:	ec e7       	ldi	r30, 0x7C	; 124
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	81 60       	ori	r24, 0x01	; 1
 412:	80 83       	st	Z, r24
		valor_pot0 = ADCH;
 414:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 418:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <valor_pot0>
		alternador_pots += 1;
 41c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 420:	8f 5f       	subi	r24, 0xFF	; 255
 422:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 426:	0f c0       	rjmp	.+30     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
	}
	else if (alternador_pots == 1)
 428:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	59 f4       	brne	.+22     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
	{
		
		ADMUX &= ~(1<<MUX0);
 430:	ec e7       	ldi	r30, 0x7C	; 124
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	8e 7f       	andi	r24, 0xFE	; 254
 438:	80 83       	st	Z, r24
		valor_pot1 = ADCH;
 43a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 43e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <valor_pot1>
		alternador_pots = 0;
 442:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	}
	ADCSRA |= (1<<ADEN);
 446:	ea e7       	ldi	r30, 0x7A	; 122
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	80 68       	ori	r24, 0x80	; 128
 44e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 450:	80 81       	ld	r24, Z
 452:	80 64       	ori	r24, 0x40	; 64
 454:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIF);
 456:	80 81       	ld	r24, Z
 458:	80 61       	ori	r24, 0x10	; 16
 45a:	80 83       	st	Z, r24
}
 45c:	ff 91       	pop	r31
 45e:	ef 91       	pop	r30
 460:	8f 91       	pop	r24
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <__vector_18>:

ISR(USART_RX_vect){
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	11 24       	eor	r1, r1
 476:	8f 93       	push	r24
	bandera_lectura = 1;
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <bandera_lectura>
	bufferRX = UDR0;
 47e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 482:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <bufferRX>
 486:	8f 91       	pop	r24
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__subsf3>:
 492:	50 58       	subi	r21, 0x80	; 128

00000494 <__addsf3>:
 494:	bb 27       	eor	r27, r27
 496:	aa 27       	eor	r26, r26
 498:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__addsf3x>
 49c:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_round>
 4a0:	0e 94 a4 03 	call	0x748	; 0x748 <__fp_pscA>
 4a4:	38 f0       	brcs	.+14     	; 0x4b4 <__addsf3+0x20>
 4a6:	0e 94 ab 03 	call	0x756	; 0x756 <__fp_pscB>
 4aa:	20 f0       	brcs	.+8      	; 0x4b4 <__addsf3+0x20>
 4ac:	39 f4       	brne	.+14     	; 0x4bc <__addsf3+0x28>
 4ae:	9f 3f       	cpi	r25, 0xFF	; 255
 4b0:	19 f4       	brne	.+6      	; 0x4b8 <__addsf3+0x24>
 4b2:	26 f4       	brtc	.+8      	; 0x4bc <__addsf3+0x28>
 4b4:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_nan>
 4b8:	0e f4       	brtc	.+2      	; 0x4bc <__addsf3+0x28>
 4ba:	e0 95       	com	r30
 4bc:	e7 fb       	bst	r30, 7
 4be:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_inf>

000004c2 <__addsf3x>:
 4c2:	e9 2f       	mov	r30, r25
 4c4:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_split3>
 4c8:	58 f3       	brcs	.-42     	; 0x4a0 <__addsf3+0xc>
 4ca:	ba 17       	cp	r27, r26
 4cc:	62 07       	cpc	r22, r18
 4ce:	73 07       	cpc	r23, r19
 4d0:	84 07       	cpc	r24, r20
 4d2:	95 07       	cpc	r25, r21
 4d4:	20 f0       	brcs	.+8      	; 0x4de <__addsf3x+0x1c>
 4d6:	79 f4       	brne	.+30     	; 0x4f6 <__addsf3x+0x34>
 4d8:	a6 f5       	brtc	.+104    	; 0x542 <__addsf3x+0x80>
 4da:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_zero>
 4de:	0e f4       	brtc	.+2      	; 0x4e2 <__addsf3x+0x20>
 4e0:	e0 95       	com	r30
 4e2:	0b 2e       	mov	r0, r27
 4e4:	ba 2f       	mov	r27, r26
 4e6:	a0 2d       	mov	r26, r0
 4e8:	0b 01       	movw	r0, r22
 4ea:	b9 01       	movw	r22, r18
 4ec:	90 01       	movw	r18, r0
 4ee:	0c 01       	movw	r0, r24
 4f0:	ca 01       	movw	r24, r20
 4f2:	a0 01       	movw	r20, r0
 4f4:	11 24       	eor	r1, r1
 4f6:	ff 27       	eor	r31, r31
 4f8:	59 1b       	sub	r21, r25
 4fa:	99 f0       	breq	.+38     	; 0x522 <__addsf3x+0x60>
 4fc:	59 3f       	cpi	r21, 0xF9	; 249
 4fe:	50 f4       	brcc	.+20     	; 0x514 <__addsf3x+0x52>
 500:	50 3e       	cpi	r21, 0xE0	; 224
 502:	68 f1       	brcs	.+90     	; 0x55e <__addsf3x+0x9c>
 504:	1a 16       	cp	r1, r26
 506:	f0 40       	sbci	r31, 0x00	; 0
 508:	a2 2f       	mov	r26, r18
 50a:	23 2f       	mov	r18, r19
 50c:	34 2f       	mov	r19, r20
 50e:	44 27       	eor	r20, r20
 510:	58 5f       	subi	r21, 0xF8	; 248
 512:	f3 cf       	rjmp	.-26     	; 0x4fa <__addsf3x+0x38>
 514:	46 95       	lsr	r20
 516:	37 95       	ror	r19
 518:	27 95       	ror	r18
 51a:	a7 95       	ror	r26
 51c:	f0 40       	sbci	r31, 0x00	; 0
 51e:	53 95       	inc	r21
 520:	c9 f7       	brne	.-14     	; 0x514 <__addsf3x+0x52>
 522:	7e f4       	brtc	.+30     	; 0x542 <__addsf3x+0x80>
 524:	1f 16       	cp	r1, r31
 526:	ba 0b       	sbc	r27, r26
 528:	62 0b       	sbc	r22, r18
 52a:	73 0b       	sbc	r23, r19
 52c:	84 0b       	sbc	r24, r20
 52e:	ba f0       	brmi	.+46     	; 0x55e <__addsf3x+0x9c>
 530:	91 50       	subi	r25, 0x01	; 1
 532:	a1 f0       	breq	.+40     	; 0x55c <__addsf3x+0x9a>
 534:	ff 0f       	add	r31, r31
 536:	bb 1f       	adc	r27, r27
 538:	66 1f       	adc	r22, r22
 53a:	77 1f       	adc	r23, r23
 53c:	88 1f       	adc	r24, r24
 53e:	c2 f7       	brpl	.-16     	; 0x530 <__addsf3x+0x6e>
 540:	0e c0       	rjmp	.+28     	; 0x55e <__addsf3x+0x9c>
 542:	ba 0f       	add	r27, r26
 544:	62 1f       	adc	r22, r18
 546:	73 1f       	adc	r23, r19
 548:	84 1f       	adc	r24, r20
 54a:	48 f4       	brcc	.+18     	; 0x55e <__addsf3x+0x9c>
 54c:	87 95       	ror	r24
 54e:	77 95       	ror	r23
 550:	67 95       	ror	r22
 552:	b7 95       	ror	r27
 554:	f7 95       	ror	r31
 556:	9e 3f       	cpi	r25, 0xFE	; 254
 558:	08 f0       	brcs	.+2      	; 0x55c <__addsf3x+0x9a>
 55a:	b0 cf       	rjmp	.-160    	; 0x4bc <__addsf3+0x28>
 55c:	93 95       	inc	r25
 55e:	88 0f       	add	r24, r24
 560:	08 f0       	brcs	.+2      	; 0x564 <__addsf3x+0xa2>
 562:	99 27       	eor	r25, r25
 564:	ee 0f       	add	r30, r30
 566:	97 95       	ror	r25
 568:	87 95       	ror	r24
 56a:	08 95       	ret

0000056c <__divsf3>:
 56c:	0e 94 ca 02 	call	0x594	; 0x594 <__divsf3x>
 570:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_round>
 574:	0e 94 ab 03 	call	0x756	; 0x756 <__fp_pscB>
 578:	58 f0       	brcs	.+22     	; 0x590 <__divsf3+0x24>
 57a:	0e 94 a4 03 	call	0x748	; 0x748 <__fp_pscA>
 57e:	40 f0       	brcs	.+16     	; 0x590 <__divsf3+0x24>
 580:	29 f4       	brne	.+10     	; 0x58c <__divsf3+0x20>
 582:	5f 3f       	cpi	r21, 0xFF	; 255
 584:	29 f0       	breq	.+10     	; 0x590 <__divsf3+0x24>
 586:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_inf>
 58a:	51 11       	cpse	r21, r1
 58c:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>
 590:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_nan>

00000594 <__divsf3x>:
 594:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_split3>
 598:	68 f3       	brcs	.-38     	; 0x574 <__divsf3+0x8>

0000059a <__divsf3_pse>:
 59a:	99 23       	and	r25, r25
 59c:	b1 f3       	breq	.-20     	; 0x58a <__divsf3+0x1e>
 59e:	55 23       	and	r21, r21
 5a0:	91 f3       	breq	.-28     	; 0x586 <__divsf3+0x1a>
 5a2:	95 1b       	sub	r25, r21
 5a4:	55 0b       	sbc	r21, r21
 5a6:	bb 27       	eor	r27, r27
 5a8:	aa 27       	eor	r26, r26
 5aa:	62 17       	cp	r22, r18
 5ac:	73 07       	cpc	r23, r19
 5ae:	84 07       	cpc	r24, r20
 5b0:	38 f0       	brcs	.+14     	; 0x5c0 <__divsf3_pse+0x26>
 5b2:	9f 5f       	subi	r25, 0xFF	; 255
 5b4:	5f 4f       	sbci	r21, 0xFF	; 255
 5b6:	22 0f       	add	r18, r18
 5b8:	33 1f       	adc	r19, r19
 5ba:	44 1f       	adc	r20, r20
 5bc:	aa 1f       	adc	r26, r26
 5be:	a9 f3       	breq	.-22     	; 0x5aa <__divsf3_pse+0x10>
 5c0:	35 d0       	rcall	.+106    	; 0x62c <__divsf3_pse+0x92>
 5c2:	0e 2e       	mov	r0, r30
 5c4:	3a f0       	brmi	.+14     	; 0x5d4 <__divsf3_pse+0x3a>
 5c6:	e0 e8       	ldi	r30, 0x80	; 128
 5c8:	32 d0       	rcall	.+100    	; 0x62e <__divsf3_pse+0x94>
 5ca:	91 50       	subi	r25, 0x01	; 1
 5cc:	50 40       	sbci	r21, 0x00	; 0
 5ce:	e6 95       	lsr	r30
 5d0:	00 1c       	adc	r0, r0
 5d2:	ca f7       	brpl	.-14     	; 0x5c6 <__divsf3_pse+0x2c>
 5d4:	2b d0       	rcall	.+86     	; 0x62c <__divsf3_pse+0x92>
 5d6:	fe 2f       	mov	r31, r30
 5d8:	29 d0       	rcall	.+82     	; 0x62c <__divsf3_pse+0x92>
 5da:	66 0f       	add	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	bb 1f       	adc	r27, r27
 5e2:	26 17       	cp	r18, r22
 5e4:	37 07       	cpc	r19, r23
 5e6:	48 07       	cpc	r20, r24
 5e8:	ab 07       	cpc	r26, r27
 5ea:	b0 e8       	ldi	r27, 0x80	; 128
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <__divsf3_pse+0x56>
 5ee:	bb 0b       	sbc	r27, r27
 5f0:	80 2d       	mov	r24, r0
 5f2:	bf 01       	movw	r22, r30
 5f4:	ff 27       	eor	r31, r31
 5f6:	93 58       	subi	r25, 0x83	; 131
 5f8:	5f 4f       	sbci	r21, 0xFF	; 255
 5fa:	3a f0       	brmi	.+14     	; 0x60a <__divsf3_pse+0x70>
 5fc:	9e 3f       	cpi	r25, 0xFE	; 254
 5fe:	51 05       	cpc	r21, r1
 600:	78 f0       	brcs	.+30     	; 0x620 <__divsf3_pse+0x86>
 602:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_inf>
 606:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>
 60a:	5f 3f       	cpi	r21, 0xFF	; 255
 60c:	e4 f3       	brlt	.-8      	; 0x606 <__divsf3_pse+0x6c>
 60e:	98 3e       	cpi	r25, 0xE8	; 232
 610:	d4 f3       	brlt	.-12     	; 0x606 <__divsf3_pse+0x6c>
 612:	86 95       	lsr	r24
 614:	77 95       	ror	r23
 616:	67 95       	ror	r22
 618:	b7 95       	ror	r27
 61a:	f7 95       	ror	r31
 61c:	9f 5f       	subi	r25, 0xFF	; 255
 61e:	c9 f7       	brne	.-14     	; 0x612 <__divsf3_pse+0x78>
 620:	88 0f       	add	r24, r24
 622:	91 1d       	adc	r25, r1
 624:	96 95       	lsr	r25
 626:	87 95       	ror	r24
 628:	97 f9       	bld	r25, 7
 62a:	08 95       	ret
 62c:	e1 e0       	ldi	r30, 0x01	; 1
 62e:	66 0f       	add	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	88 1f       	adc	r24, r24
 634:	bb 1f       	adc	r27, r27
 636:	62 17       	cp	r22, r18
 638:	73 07       	cpc	r23, r19
 63a:	84 07       	cpc	r24, r20
 63c:	ba 07       	cpc	r27, r26
 63e:	20 f0       	brcs	.+8      	; 0x648 <__divsf3_pse+0xae>
 640:	62 1b       	sub	r22, r18
 642:	73 0b       	sbc	r23, r19
 644:	84 0b       	sbc	r24, r20
 646:	ba 0b       	sbc	r27, r26
 648:	ee 1f       	adc	r30, r30
 64a:	88 f7       	brcc	.-30     	; 0x62e <__divsf3_pse+0x94>
 64c:	e0 95       	com	r30
 64e:	08 95       	ret

00000650 <__fixsfsi>:
 650:	0e 94 2f 03 	call	0x65e	; 0x65e <__fixunssfsi>
 654:	68 94       	set
 656:	b1 11       	cpse	r27, r1
 658:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>
 65c:	08 95       	ret

0000065e <__fixunssfsi>:
 65e:	0e 94 cb 03 	call	0x796	; 0x796 <__fp_splitA>
 662:	88 f0       	brcs	.+34     	; 0x686 <__fixunssfsi+0x28>
 664:	9f 57       	subi	r25, 0x7F	; 127
 666:	98 f0       	brcs	.+38     	; 0x68e <__fixunssfsi+0x30>
 668:	b9 2f       	mov	r27, r25
 66a:	99 27       	eor	r25, r25
 66c:	b7 51       	subi	r27, 0x17	; 23
 66e:	b0 f0       	brcs	.+44     	; 0x69c <__fixunssfsi+0x3e>
 670:	e1 f0       	breq	.+56     	; 0x6aa <__fixunssfsi+0x4c>
 672:	66 0f       	add	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	88 1f       	adc	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	1a f0       	brmi	.+6      	; 0x682 <__fixunssfsi+0x24>
 67c:	ba 95       	dec	r27
 67e:	c9 f7       	brne	.-14     	; 0x672 <__fixunssfsi+0x14>
 680:	14 c0       	rjmp	.+40     	; 0x6aa <__fixunssfsi+0x4c>
 682:	b1 30       	cpi	r27, 0x01	; 1
 684:	91 f0       	breq	.+36     	; 0x6aa <__fixunssfsi+0x4c>
 686:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_zero>
 68a:	b1 e0       	ldi	r27, 0x01	; 1
 68c:	08 95       	ret
 68e:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_zero>
 692:	67 2f       	mov	r22, r23
 694:	78 2f       	mov	r23, r24
 696:	88 27       	eor	r24, r24
 698:	b8 5f       	subi	r27, 0xF8	; 248
 69a:	39 f0       	breq	.+14     	; 0x6aa <__fixunssfsi+0x4c>
 69c:	b9 3f       	cpi	r27, 0xF9	; 249
 69e:	cc f3       	brlt	.-14     	; 0x692 <__fixunssfsi+0x34>
 6a0:	86 95       	lsr	r24
 6a2:	77 95       	ror	r23
 6a4:	67 95       	ror	r22
 6a6:	b3 95       	inc	r27
 6a8:	d9 f7       	brne	.-10     	; 0x6a0 <__fixunssfsi+0x42>
 6aa:	3e f4       	brtc	.+14     	; 0x6ba <__fixunssfsi+0x5c>
 6ac:	90 95       	com	r25
 6ae:	80 95       	com	r24
 6b0:	70 95       	com	r23
 6b2:	61 95       	neg	r22
 6b4:	7f 4f       	sbci	r23, 0xFF	; 255
 6b6:	8f 4f       	sbci	r24, 0xFF	; 255
 6b8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ba:	08 95       	ret

000006bc <__floatunsisf>:
 6bc:	e8 94       	clt
 6be:	09 c0       	rjmp	.+18     	; 0x6d2 <__floatsisf+0x12>

000006c0 <__floatsisf>:
 6c0:	97 fb       	bst	r25, 7
 6c2:	3e f4       	brtc	.+14     	; 0x6d2 <__floatsisf+0x12>
 6c4:	90 95       	com	r25
 6c6:	80 95       	com	r24
 6c8:	70 95       	com	r23
 6ca:	61 95       	neg	r22
 6cc:	7f 4f       	sbci	r23, 0xFF	; 255
 6ce:	8f 4f       	sbci	r24, 0xFF	; 255
 6d0:	9f 4f       	sbci	r25, 0xFF	; 255
 6d2:	99 23       	and	r25, r25
 6d4:	a9 f0       	breq	.+42     	; 0x700 <__floatsisf+0x40>
 6d6:	f9 2f       	mov	r31, r25
 6d8:	96 e9       	ldi	r25, 0x96	; 150
 6da:	bb 27       	eor	r27, r27
 6dc:	93 95       	inc	r25
 6de:	f6 95       	lsr	r31
 6e0:	87 95       	ror	r24
 6e2:	77 95       	ror	r23
 6e4:	67 95       	ror	r22
 6e6:	b7 95       	ror	r27
 6e8:	f1 11       	cpse	r31, r1
 6ea:	f8 cf       	rjmp	.-16     	; 0x6dc <__floatsisf+0x1c>
 6ec:	fa f4       	brpl	.+62     	; 0x72c <__floatsisf+0x6c>
 6ee:	bb 0f       	add	r27, r27
 6f0:	11 f4       	brne	.+4      	; 0x6f6 <__floatsisf+0x36>
 6f2:	60 ff       	sbrs	r22, 0
 6f4:	1b c0       	rjmp	.+54     	; 0x72c <__floatsisf+0x6c>
 6f6:	6f 5f       	subi	r22, 0xFF	; 255
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
 6fa:	8f 4f       	sbci	r24, 0xFF	; 255
 6fc:	9f 4f       	sbci	r25, 0xFF	; 255
 6fe:	16 c0       	rjmp	.+44     	; 0x72c <__floatsisf+0x6c>
 700:	88 23       	and	r24, r24
 702:	11 f0       	breq	.+4      	; 0x708 <__floatsisf+0x48>
 704:	96 e9       	ldi	r25, 0x96	; 150
 706:	11 c0       	rjmp	.+34     	; 0x72a <__floatsisf+0x6a>
 708:	77 23       	and	r23, r23
 70a:	21 f0       	breq	.+8      	; 0x714 <__floatsisf+0x54>
 70c:	9e e8       	ldi	r25, 0x8E	; 142
 70e:	87 2f       	mov	r24, r23
 710:	76 2f       	mov	r23, r22
 712:	05 c0       	rjmp	.+10     	; 0x71e <__floatsisf+0x5e>
 714:	66 23       	and	r22, r22
 716:	71 f0       	breq	.+28     	; 0x734 <__floatsisf+0x74>
 718:	96 e8       	ldi	r25, 0x86	; 134
 71a:	86 2f       	mov	r24, r22
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	2a f0       	brmi	.+10     	; 0x72c <__floatsisf+0x6c>
 722:	9a 95       	dec	r25
 724:	66 0f       	add	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	88 1f       	adc	r24, r24
 72a:	da f7       	brpl	.-10     	; 0x722 <__floatsisf+0x62>
 72c:	88 0f       	add	r24, r24
 72e:	96 95       	lsr	r25
 730:	87 95       	ror	r24
 732:	97 f9       	bld	r25, 7
 734:	08 95       	ret

00000736 <__fp_inf>:
 736:	97 f9       	bld	r25, 7
 738:	9f 67       	ori	r25, 0x7F	; 127
 73a:	80 e8       	ldi	r24, 0x80	; 128
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	08 95       	ret

00000742 <__fp_nan>:
 742:	9f ef       	ldi	r25, 0xFF	; 255
 744:	80 ec       	ldi	r24, 0xC0	; 192
 746:	08 95       	ret

00000748 <__fp_pscA>:
 748:	00 24       	eor	r0, r0
 74a:	0a 94       	dec	r0
 74c:	16 16       	cp	r1, r22
 74e:	17 06       	cpc	r1, r23
 750:	18 06       	cpc	r1, r24
 752:	09 06       	cpc	r0, r25
 754:	08 95       	ret

00000756 <__fp_pscB>:
 756:	00 24       	eor	r0, r0
 758:	0a 94       	dec	r0
 75a:	12 16       	cp	r1, r18
 75c:	13 06       	cpc	r1, r19
 75e:	14 06       	cpc	r1, r20
 760:	05 06       	cpc	r0, r21
 762:	08 95       	ret

00000764 <__fp_round>:
 764:	09 2e       	mov	r0, r25
 766:	03 94       	inc	r0
 768:	00 0c       	add	r0, r0
 76a:	11 f4       	brne	.+4      	; 0x770 <__fp_round+0xc>
 76c:	88 23       	and	r24, r24
 76e:	52 f0       	brmi	.+20     	; 0x784 <__fp_round+0x20>
 770:	bb 0f       	add	r27, r27
 772:	40 f4       	brcc	.+16     	; 0x784 <__fp_round+0x20>
 774:	bf 2b       	or	r27, r31
 776:	11 f4       	brne	.+4      	; 0x77c <__fp_round+0x18>
 778:	60 ff       	sbrs	r22, 0
 77a:	04 c0       	rjmp	.+8      	; 0x784 <__fp_round+0x20>
 77c:	6f 5f       	subi	r22, 0xFF	; 255
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	8f 4f       	sbci	r24, 0xFF	; 255
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	08 95       	ret

00000786 <__fp_split3>:
 786:	57 fd       	sbrc	r21, 7
 788:	90 58       	subi	r25, 0x80	; 128
 78a:	44 0f       	add	r20, r20
 78c:	55 1f       	adc	r21, r21
 78e:	59 f0       	breq	.+22     	; 0x7a6 <__fp_splitA+0x10>
 790:	5f 3f       	cpi	r21, 0xFF	; 255
 792:	71 f0       	breq	.+28     	; 0x7b0 <__fp_splitA+0x1a>
 794:	47 95       	ror	r20

00000796 <__fp_splitA>:
 796:	88 0f       	add	r24, r24
 798:	97 fb       	bst	r25, 7
 79a:	99 1f       	adc	r25, r25
 79c:	61 f0       	breq	.+24     	; 0x7b6 <__fp_splitA+0x20>
 79e:	9f 3f       	cpi	r25, 0xFF	; 255
 7a0:	79 f0       	breq	.+30     	; 0x7c0 <__fp_splitA+0x2a>
 7a2:	87 95       	ror	r24
 7a4:	08 95       	ret
 7a6:	12 16       	cp	r1, r18
 7a8:	13 06       	cpc	r1, r19
 7aa:	14 06       	cpc	r1, r20
 7ac:	55 1f       	adc	r21, r21
 7ae:	f2 cf       	rjmp	.-28     	; 0x794 <__fp_split3+0xe>
 7b0:	46 95       	lsr	r20
 7b2:	f1 df       	rcall	.-30     	; 0x796 <__fp_splitA>
 7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <__fp_splitA+0x30>
 7b6:	16 16       	cp	r1, r22
 7b8:	17 06       	cpc	r1, r23
 7ba:	18 06       	cpc	r1, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	f1 cf       	rjmp	.-30     	; 0x7a2 <__fp_splitA+0xc>
 7c0:	86 95       	lsr	r24
 7c2:	71 05       	cpc	r23, r1
 7c4:	61 05       	cpc	r22, r1
 7c6:	08 94       	sec
 7c8:	08 95       	ret

000007ca <__fp_zero>:
 7ca:	e8 94       	clt

000007cc <__fp_szero>:
 7cc:	bb 27       	eor	r27, r27
 7ce:	66 27       	eor	r22, r22
 7d0:	77 27       	eor	r23, r23
 7d2:	cb 01       	movw	r24, r22
 7d4:	97 f9       	bld	r25, 7
 7d6:	08 95       	ret

000007d8 <__mulsf3>:
 7d8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__mulsf3x>
 7dc:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_round>
 7e0:	0e 94 a4 03 	call	0x748	; 0x748 <__fp_pscA>
 7e4:	38 f0       	brcs	.+14     	; 0x7f4 <__mulsf3+0x1c>
 7e6:	0e 94 ab 03 	call	0x756	; 0x756 <__fp_pscB>
 7ea:	20 f0       	brcs	.+8      	; 0x7f4 <__mulsf3+0x1c>
 7ec:	95 23       	and	r25, r21
 7ee:	11 f0       	breq	.+4      	; 0x7f4 <__mulsf3+0x1c>
 7f0:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_inf>
 7f4:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_nan>
 7f8:	11 24       	eor	r1, r1
 7fa:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>

000007fe <__mulsf3x>:
 7fe:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_split3>
 802:	70 f3       	brcs	.-36     	; 0x7e0 <__mulsf3+0x8>

00000804 <__mulsf3_pse>:
 804:	95 9f       	mul	r25, r21
 806:	c1 f3       	breq	.-16     	; 0x7f8 <__mulsf3+0x20>
 808:	95 0f       	add	r25, r21
 80a:	50 e0       	ldi	r21, 0x00	; 0
 80c:	55 1f       	adc	r21, r21
 80e:	62 9f       	mul	r22, r18
 810:	f0 01       	movw	r30, r0
 812:	72 9f       	mul	r23, r18
 814:	bb 27       	eor	r27, r27
 816:	f0 0d       	add	r31, r0
 818:	b1 1d       	adc	r27, r1
 81a:	63 9f       	mul	r22, r19
 81c:	aa 27       	eor	r26, r26
 81e:	f0 0d       	add	r31, r0
 820:	b1 1d       	adc	r27, r1
 822:	aa 1f       	adc	r26, r26
 824:	64 9f       	mul	r22, r20
 826:	66 27       	eor	r22, r22
 828:	b0 0d       	add	r27, r0
 82a:	a1 1d       	adc	r26, r1
 82c:	66 1f       	adc	r22, r22
 82e:	82 9f       	mul	r24, r18
 830:	22 27       	eor	r18, r18
 832:	b0 0d       	add	r27, r0
 834:	a1 1d       	adc	r26, r1
 836:	62 1f       	adc	r22, r18
 838:	73 9f       	mul	r23, r19
 83a:	b0 0d       	add	r27, r0
 83c:	a1 1d       	adc	r26, r1
 83e:	62 1f       	adc	r22, r18
 840:	83 9f       	mul	r24, r19
 842:	a0 0d       	add	r26, r0
 844:	61 1d       	adc	r22, r1
 846:	22 1f       	adc	r18, r18
 848:	74 9f       	mul	r23, r20
 84a:	33 27       	eor	r19, r19
 84c:	a0 0d       	add	r26, r0
 84e:	61 1d       	adc	r22, r1
 850:	23 1f       	adc	r18, r19
 852:	84 9f       	mul	r24, r20
 854:	60 0d       	add	r22, r0
 856:	21 1d       	adc	r18, r1
 858:	82 2f       	mov	r24, r18
 85a:	76 2f       	mov	r23, r22
 85c:	6a 2f       	mov	r22, r26
 85e:	11 24       	eor	r1, r1
 860:	9f 57       	subi	r25, 0x7F	; 127
 862:	50 40       	sbci	r21, 0x00	; 0
 864:	9a f0       	brmi	.+38     	; 0x88c <__mulsf3_pse+0x88>
 866:	f1 f0       	breq	.+60     	; 0x8a4 <__mulsf3_pse+0xa0>
 868:	88 23       	and	r24, r24
 86a:	4a f0       	brmi	.+18     	; 0x87e <__mulsf3_pse+0x7a>
 86c:	ee 0f       	add	r30, r30
 86e:	ff 1f       	adc	r31, r31
 870:	bb 1f       	adc	r27, r27
 872:	66 1f       	adc	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	91 50       	subi	r25, 0x01	; 1
 87a:	50 40       	sbci	r21, 0x00	; 0
 87c:	a9 f7       	brne	.-22     	; 0x868 <__mulsf3_pse+0x64>
 87e:	9e 3f       	cpi	r25, 0xFE	; 254
 880:	51 05       	cpc	r21, r1
 882:	80 f0       	brcs	.+32     	; 0x8a4 <__mulsf3_pse+0xa0>
 884:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_inf>
 888:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>
 88c:	5f 3f       	cpi	r21, 0xFF	; 255
 88e:	e4 f3       	brlt	.-8      	; 0x888 <__mulsf3_pse+0x84>
 890:	98 3e       	cpi	r25, 0xE8	; 232
 892:	d4 f3       	brlt	.-12     	; 0x888 <__mulsf3_pse+0x84>
 894:	86 95       	lsr	r24
 896:	77 95       	ror	r23
 898:	67 95       	ror	r22
 89a:	b7 95       	ror	r27
 89c:	f7 95       	ror	r31
 89e:	e7 95       	ror	r30
 8a0:	9f 5f       	subi	r25, 0xFF	; 255
 8a2:	c1 f7       	brne	.-16     	; 0x894 <__mulsf3_pse+0x90>
 8a4:	fe 2b       	or	r31, r30
 8a6:	88 0f       	add	r24, r24
 8a8:	91 1d       	adc	r25, r1
 8aa:	96 95       	lsr	r25
 8ac:	87 95       	ror	r24
 8ae:	97 f9       	bld	r25, 7
 8b0:	08 95       	ret

000008b2 <__divmodhi4>:
 8b2:	97 fb       	bst	r25, 7
 8b4:	07 2e       	mov	r0, r23
 8b6:	16 f4       	brtc	.+4      	; 0x8bc <__divmodhi4+0xa>
 8b8:	00 94       	com	r0
 8ba:	07 d0       	rcall	.+14     	; 0x8ca <__divmodhi4_neg1>
 8bc:	77 fd       	sbrc	r23, 7
 8be:	09 d0       	rcall	.+18     	; 0x8d2 <__divmodhi4_neg2>
 8c0:	0e 94 6d 04 	call	0x8da	; 0x8da <__udivmodhi4>
 8c4:	07 fc       	sbrc	r0, 7
 8c6:	05 d0       	rcall	.+10     	; 0x8d2 <__divmodhi4_neg2>
 8c8:	3e f4       	brtc	.+14     	; 0x8d8 <__divmodhi4_exit>

000008ca <__divmodhi4_neg1>:
 8ca:	90 95       	com	r25
 8cc:	81 95       	neg	r24
 8ce:	9f 4f       	sbci	r25, 0xFF	; 255
 8d0:	08 95       	ret

000008d2 <__divmodhi4_neg2>:
 8d2:	70 95       	com	r23
 8d4:	61 95       	neg	r22
 8d6:	7f 4f       	sbci	r23, 0xFF	; 255

000008d8 <__divmodhi4_exit>:
 8d8:	08 95       	ret

000008da <__udivmodhi4>:
 8da:	aa 1b       	sub	r26, r26
 8dc:	bb 1b       	sub	r27, r27
 8de:	51 e1       	ldi	r21, 0x11	; 17
 8e0:	07 c0       	rjmp	.+14     	; 0x8f0 <__udivmodhi4_ep>

000008e2 <__udivmodhi4_loop>:
 8e2:	aa 1f       	adc	r26, r26
 8e4:	bb 1f       	adc	r27, r27
 8e6:	a6 17       	cp	r26, r22
 8e8:	b7 07       	cpc	r27, r23
 8ea:	10 f0       	brcs	.+4      	; 0x8f0 <__udivmodhi4_ep>
 8ec:	a6 1b       	sub	r26, r22
 8ee:	b7 0b       	sbc	r27, r23

000008f0 <__udivmodhi4_ep>:
 8f0:	88 1f       	adc	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	5a 95       	dec	r21
 8f6:	a9 f7       	brne	.-22     	; 0x8e2 <__udivmodhi4_loop>
 8f8:	80 95       	com	r24
 8fa:	90 95       	com	r25
 8fc:	bc 01       	movw	r22, r24
 8fe:	cd 01       	movw	r24, r26
 900:	08 95       	ret

00000902 <strcat>:
 902:	fb 01       	movw	r30, r22
 904:	dc 01       	movw	r26, r24
 906:	0d 90       	ld	r0, X+
 908:	00 20       	and	r0, r0
 90a:	e9 f7       	brne	.-6      	; 0x906 <strcat+0x4>
 90c:	11 97       	sbiw	r26, 0x01	; 1
 90e:	01 90       	ld	r0, Z+
 910:	0d 92       	st	X+, r0
 912:	00 20       	and	r0, r0
 914:	e1 f7       	brne	.-8      	; 0x90e <strcat+0xc>
 916:	08 95       	ret

00000918 <strcpy>:
 918:	fb 01       	movw	r30, r22
 91a:	dc 01       	movw	r26, r24
 91c:	01 90       	ld	r0, Z+
 91e:	0d 92       	st	X+, r0
 920:	00 20       	and	r0, r0
 922:	e1 f7       	brne	.-8      	; 0x91c <strcpy+0x4>
 924:	08 95       	ret

00000926 <_exit>:
 926:	f8 94       	cli

00000928 <__stop_program>:
 928:	ff cf       	rjmp	.-2      	; 0x928 <__stop_program>
